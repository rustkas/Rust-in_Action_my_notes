pub fn compare_arrays(array_10: &[u8], array_2: &[u8], array_8: &[u8], array_16: &[u8]) {
    // Проверяем, что длины всех массивов одинаковы
    if array_10.len() != array_2.len()
        || array_2.len() != array_8.len()
        || array_8.len() != array_16.len()
    {
        panic!("Длины массивов не совпадают");
    }
    let array = [array_10, array_16, array_2, array_8];
    // println!("{array:?}");
    // if true {
    //     return;
    // }
    
 // Перебор каждого массива в массиве array
for i in 0..array.len() {
    // Внутренний цикл для сравнения текущего массива с каждым массивом после него
    for j in i + 1..array.len() {
        // Проверка, чтобы не сравнивать массив с самим собой
        if i != j {
            // Сравнение элементов с одинаковыми индексами из двух массивов
            for (element1, element2) in array[i].iter().zip(array[j].iter()) {
                // Если элементы равны, выводим сообщение
                if element1 != element2 {
                    println!("Элемент {element1} и {element2} в массивах {i} и {j} не совпадают.");
                }else {
                    println!("{element1}, {element2} {i}: {j}");
                }
            }
        }
    }
}
    println!("Значения совпадают.");
}

pub fn get_10() -> [u8; 256] {
    let array_10: [u8; 256] = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
        167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
        185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
        203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
        239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
    ];
    array_10
}

pub fn get_2() -> [u8; 256] {
    let array_2: [u8; 256] = [
        0b0, 0b1, 0b10, 0b11, 0b100, 0b101, 0b110, 0b111, 0b1000, 0b1001, 0b1010, 0b1011, 0b1100,
        0b1101, 0b1110, 0b1111, 0b10000, 0b10001, 0b10010, 0b10011, 0b10100, 0b10101, 0b10110,
        0b10111, 0b11000, 0b11001, 0b11010, 0b11011, 0b11100, 0b11101, 0b11110, 0b11111, 0b100000,
        0b100001, 0b100010, 0b100011, 0b100100, 0b100101, 0b100110, 0b100111, 0b101000, 0b101001,
        0b101010, 0b101011, 0b101100, 0b101101, 0b101110, 0b101111, 0b110000, 0b110001, 0b110010,
        0b110011, 0b110100, 0b110101, 0b110110, 0b110111, 0b111000, 0b111001, 0b111010, 0b111011,
        0b111100, 0b111101, 0b111110, 0b111111, 0b1000000, 0b1000001, 0b1000010, 0b1000011,
        0b1000100, 0b1000101, 0b1000110, 0b1000111, 0b1001000, 0b1001001, 0b1001010, 0b1001011,
        0b1001100, 0b1001101, 0b1001110, 0b1001111, 0b1010000, 0b1010001, 0b1010010, 0b1010011,
        0b1010100, 0b1010101, 0b1010110, 0b1010111, 0b1011000, 0b1011001, 0b1011010, 0b1011011,
        0b1011100, 0b1011101, 0b1011110, 0b1011111, 0b1100000, 0b1100001, 0b1100010, 0b1100011,
        0b1100100, 0b1100101, 0b1100110, 0b1100111, 0b1101000, 0b1101001, 0b1101010, 0b1101011,
        0b1101100, 0b1101101, 0b1101110, 0b1101111, 0b1110000, 0b1110001, 0b1110010, 0b1110011,
        0b1110100, 0b1110101, 0b1110110, 0b1110111, 0b1111000, 0b1111001, 0b1111010, 0b1111011,
        0b1111100, 0b1111101, 0b1111110, 0b1111111, 0b10000000, 0b10000001, 0b10000010, 0b10000011,
        0b10000100, 0b10000101, 0b10000110, 0b10000111, 0b10001000, 0b10001001, 0b10001010,
        0b10001011, 0b10001100, 0b10001101, 0b10001110, 0b10001111, 0b10010000, 0b10010001,
        0b10010010, 0b10010011, 0b10010100, 0b10010101, 0b10010110, 0b10010111, 0b10011000,
        0b10011001, 0b10011010, 0b10011011, 0b10011100, 0b10011101, 0b10011110, 0b10011111,
        0b10100000, 0b10100001, 0b10100010, 0b10100011, 0b10100100, 0b10100101, 0b10100110,
        0b10100111, 0b10101000, 0b10101001, 0b10101010, 0b10101011, 0b10101100, 0b10101101,
        0b10101110, 0b10101111, 0b10110000, 0b10110001, 0b10110010, 0b10110011, 0b10110100,
        0b10110101, 0b10110110, 0b10110111, 0b10111000, 0b10111001, 0b10111010, 0b10111011,
        0b10111100, 0b10111101, 0b10111110, 0b10111111, 0b11000000, 0b11000001, 0b11000010,
        0b11000011, 0b11000100, 0b11000101, 0b11000110, 0b11000111, 0b11001000, 0b11001001,
        0b11001010, 0b11001011, 0b11001100, 0b11001101, 0b11001110, 0b11001111, 0b11010000,
        0b11010001, 0b11010010, 0b11010011, 0b11010100, 0b11010101, 0b11010110, 0b11010111,
        0b11011000, 0b11011001, 0b11011010, 0b11011011, 0b11011100, 0b11011101, 0b11011110,
        0b11011111, 0b11100000, 0b11100001, 0b11100010, 0b11100011, 0b11100100, 0b11100101,
        0b11100110, 0b11100111, 0b11101000, 0b11101001, 0b11101010, 0b11101011, 0b11101100,
        0b11101101, 0b11101110, 0b11101111, 0b11110000, 0b11110001, 0b11110010, 0b11110011,
        0b11110100, 0b11110101, 0b11110110, 0b11110111, 0b11111000, 0b11111001, 0b11111010,
        0b11111011, 0b11111100, 0b11111101, 0b11111110, 0b11111111,
    ];
    array_2
}

pub fn get_8() -> [u8; 256] {
    let array_8: [u8; 256] = [
        0o0, 0o1, 0o2, 0o3, 0o4, 0o5, 0o6, 0o7, 0o10, 0o11, 0o12, 0o13, 0o14, 0o15, 0o16, 0o17,
        0o20, 0o21, 0o22, 0o23, 0o24, 0o25, 0o26, 0o27, 0o30, 0o31, 0o32, 0o33, 0o34, 0o35, 0o36,
        0o37, 0o40, 0o41, 0o42, 0o43, 0o44, 0o45, 0o46, 0o47, 0o50, 0o51, 0o52, 0o53, 0o54, 0o55,
        0o56, 0o57, 0o60, 0o61, 0o62, 0o63, 0o64, 0o65, 0o66, 0o67, 0o70, 0o71, 0o72, 0o73, 0o74,
        0o75, 0o76, 0o77, 0o100, 0o101, 0o102, 0o103, 0o104, 0o105, 0o106, 0o107, 0o110, 0o111,
        0o112, 0o113, 0o114, 0o115, 0o116, 0o117, 0o120, 0o121, 0o122, 0o123, 0o124, 0o125, 0o126,
        0o127, 0o130, 0o131, 0o132, 0o133, 0o134, 0o135, 0o136, 0o137, 0o140, 0o141, 0o142, 0o143,
        0o144, 0o145, 0o146, 0o147, 0o150, 0o151, 0o152, 0o153, 0o154, 0o155, 0o156, 0o157, 0o160,
        0o161, 0o162, 0o163, 0o164, 0o165, 0o166, 0o167, 0o170, 0o171, 0o172, 0o173, 0o174, 0o175,
        0o176, 0o177, 0o200, 0o201, 0o202, 0o203, 0o204, 0o205, 0o206, 0o207, 0o210, 0o211, 0o212,
        0o213, 0o214, 0o215, 0o216, 0o217, 0o220, 0o221, 0o222, 0o223, 0o224, 0o225, 0o226, 0o227,
        0o230, 0o231, 0o232, 0o233, 0o234, 0o235, 0o236, 0o237, 0o240, 0o241, 0o242, 0o243, 0o244,
        0o245, 0o246, 0o247, 0o250, 0o251, 0o252, 0o253, 0o254, 0o255, 0o256, 0o257, 0o260, 0o261,
        0o262, 0o263, 0o264, 0o265, 0o266, 0o267, 0o270, 0o271, 0o272, 0o273, 0o274, 0o275, 0o276,
        0o277, 0o300, 0o301, 0o302, 0o303, 0o304, 0o305, 0o306, 0o307, 0o310, 0o311, 0o312, 0o313,
        0o314, 0o315, 0o316, 0o317, 0o320, 0o321, 0o322, 0o323, 0o324, 0o325, 0o326, 0o327, 0o330,
        0o331, 0o332, 0o333, 0o334, 0o335, 0o336, 0o337, 0o340, 0o341, 0o342, 0o343, 0o344, 0o345,
        0o346, 0o347, 0o350, 0o351, 0o352, 0o353, 0o354, 0o355, 0o356, 0o357, 0o360, 0o361, 0o362,
        0o363, 0o364, 0o365, 0o366, 0o367, 0o370, 0o371, 0o372, 0o373, 0o374, 0o375, 0o376, 0o377,
    ];
    array_8
}

pub fn get_16() -> [u8; 256] {
    let array_16: [u8; 256] = [
        0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11,
        0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
        0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
        0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,
        0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
        0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
        0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
        0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5,
        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3,
        0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2,
        0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
    ];
    array_16
}
